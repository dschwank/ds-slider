!function () {
    'use strict';
    angular.module('ds.slider', []);
}(), angular.module('ds.slider').directive('dsSlider', ["$document","$log","dsSliderService",function(e,t,r){return{restrict:"EA",replace:!0,require:"^ngModel",scope:{minBorder:"@min",maxBorder:"@max",step:"@?"},link:function(a,n,i,o){function d(e){return function(t){var a;a=t.originalEvent||t,u||(u=setTimeout(function(){var t;r.sliderMovedTo(m,e,a.clientX),t=r.prepareModelValue(m),o.$setViewValue(t),u=void 0},m.throttle)),a.preventDefault()}}function l(t){var r=function(a){var n=a.originalEvent||a;n.preventDefault(),e.off("mousemove",t),e.off("mouseup",r)};return r}function s(t){return function(a){var n;r.startSlide(m,a),n=d(t),e.on("mousemove",n),e.on("mouseup",l(n))}}var u,m={elements:{},start:{},data:{},throttle:i.updateThrottle||50};o.$render=function(){t.debug("RENDER"),m.data.min=parseFloat(o.$viewValue.min),m.data.max=parseFloat(o.$viewValue.max),r.startSlide(m),r.sliderMovedBy(m,"min"),r.sliderMovedBy(m,"max")},a.$watchGroup(["minBorder","maxBorder","step"],function(e){m.data.minBorder=parseFloat(e[0]),m.data.maxBorder=parseFloat(e[1]),m.data.step=angular.isDefined(e[2])?parseFloat(e[2]):0,r.startSlide(m),r.sliderMovedBy(m,"min"),r.sliderMovedBy(m,"max")}),function(){m.elements=r.findElements(n),m.elements.min.on("mousedown",s("min")),m.elements.max.on("mousedown",s("max")),r.startSlide(m)}()},templateUrl:"src/templates/dsSlider.tpl.html"}}]), function () {
    'use strict';
    angular.module('ds.slider').factory('dsSliderService', function () {
        function e(e) {
            var r;
            return r = {
                min: t(e.data.min, e.data.step),
                max: t(e.data.max, e.data.step)
            };
        }
        function t(e, t) {
            var r = e;
            return angular.isNumber(t) && (r = e - e % t), r;
        }
        function r(e, t, r) {
            a(e, t, (r - e.start.x) * e.start.perPx);
        }
        function a(e, t, r) {
            var a;
            a = d(e, t, r), e.data[t] = a, e.data[t + 'Per'] = (a - e.data.minBorder) / e.start.range * 100, l(e.elements.positioner, e.data);
        }
        function n(e, t) {
            var r;
            r = angular.isObject(t) ? t.originalEvent || t : {}, e.start.x = r.clientX, e.start.totalWidth = i(e.elements.parent), e.start.min = e.data.min, e.start.max = e.data.max, e.start.range = e.data.maxBorder - e.data.minBorder, e.start.perPx = e.start.range / e.start.totalWidth;
        }
        function i(e) {
            return e[0].clientWidth - 36;
        }
        function o(e) {
            var t;
            return t = {
                parent: e,
                min: s(e[0], '.minSlider'),
                positioner: s(e[0], '.positioner'),
                max: s(e[0], '.maxSlider')
            };
        }
        function d(e, t, r) {
            var a, n, i;
            return 'max' === t ? (n = e.start.min, i = e.data.maxBorder) : (n = e.data.minBorder, i = e.start.max), a = e.start[t] + (r || 0), a = n > a ? n : a > i ? i : a;
        }
        function l(e, t) {
            console.log('UPDATE CSS', t), e.css({
                width: t.maxPer - t.minPer + '%',
                left: t.minPer + '%'
            });
        }
        function s(e, t) {
            return angular.element(e.querySelector(t));
        }
        var u;
        return u = {
            changeValue: d,
            determineTotalWidth: i,
            findElements: o,
            prepareModelValue: e,
            sliderMovedBy: a,
            sliderMovedTo: r,
            startSlide: n,
            updateCSS: l
        };
    });
}();